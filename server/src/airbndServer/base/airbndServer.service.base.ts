/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AirbndServer as PrismaAirbndServer } from "@prisma/client";

export class AirbndServerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AirbndServerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.airbndServer.count(args);
  }

  async airbndServers(
    args: Prisma.AirbndServerFindManyArgs
  ): Promise<PrismaAirbndServer[]> {
    return this.prisma.airbndServer.findMany(args);
  }
  async airbndServer(
    args: Prisma.AirbndServerFindUniqueArgs
  ): Promise<PrismaAirbndServer | null> {
    return this.prisma.airbndServer.findUnique(args);
  }
  async createAirbndServer(
    args: Prisma.AirbndServerCreateArgs
  ): Promise<PrismaAirbndServer> {
    return this.prisma.airbndServer.create(args);
  }
  async updateAirbndServer(
    args: Prisma.AirbndServerUpdateArgs
  ): Promise<PrismaAirbndServer> {
    return this.prisma.airbndServer.update(args);
  }
  async deleteAirbndServer(
    args: Prisma.AirbndServerDeleteArgs
  ): Promise<PrismaAirbndServer> {
    return this.prisma.airbndServer.delete(args);
  }
}
