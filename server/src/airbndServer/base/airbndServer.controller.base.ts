/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AirbndServerService } from "../airbndServer.service";
import { AirbndServerCreateInput } from "./AirbndServerCreateInput";
import { AirbndServer } from "./AirbndServer";
import { AirbndServerFindManyArgs } from "./AirbndServerFindManyArgs";
import { AirbndServerWhereUniqueInput } from "./AirbndServerWhereUniqueInput";
import { AirbndServerUpdateInput } from "./AirbndServerUpdateInput";

export class AirbndServerControllerBase {
  constructor(protected readonly service: AirbndServerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AirbndServer })
  async createAirbndServer(
    @common.Body() data: AirbndServerCreateInput
  ): Promise<AirbndServer> {
    return await this.service.createAirbndServer({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AirbndServer] })
  @ApiNestedQuery(AirbndServerFindManyArgs)
  async airbndServers(@common.Req() request: Request): Promise<AirbndServer[]> {
    const args = plainToClass(AirbndServerFindManyArgs, request.query);
    return this.service.airbndServers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AirbndServer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async airbndServer(
    @common.Param() params: AirbndServerWhereUniqueInput
  ): Promise<AirbndServer | null> {
    const result = await this.service.airbndServer({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AirbndServer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAirbndServer(
    @common.Param() params: AirbndServerWhereUniqueInput,
    @common.Body() data: AirbndServerUpdateInput
  ): Promise<AirbndServer | null> {
    try {
      return await this.service.updateAirbndServer({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AirbndServer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAirbndServer(
    @common.Param() params: AirbndServerWhereUniqueInput
  ): Promise<AirbndServer | null> {
    try {
      return await this.service.deleteAirbndServer({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
